from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api.formatters import JSONFormatter

def youtube(youtube_url):

    trans_list=[]
    print("youtube start")
    # youtube_id= 'F8f_Tobdu6o'
    # 유튜브 해당 영상에서 공유 버튼 링크 기준
    youtube_id= youtube_url.split('?')[0].split('/')[-1]

    # retrieve the available transcripts
    transcript_list = YouTubeTranscriptApi.list_transcripts(youtube_id) # input 형식으로 받기      UFTkjxSeDIc     F8f_Tobdu6o
    formatter = JSONFormatter()
    # iterate over all available transcripts
    # print(transcript_list)
    for transcript in transcript_list:

        # # the Transcript object provides metadata properties
        print(
            # transcript.video_id,
            # transcript.language,
            transcript.language_code,
            # whether it has been manually created or generated by YouTube
            # transcript.is_generated,
            # whether this transcript can be translated or not
            # transcript.is_translatable,
            # a list of languages the transcript can be translated to
            # transcript.translation_languages,
        )
        trans_list.append(transcript.language_code)
        # a = transcript.fetch()
        # # print(a)
        # b = ''
        # c = ''
        # # fetch the actual transcript data
        # # print(transcript.is_generated)
        # # print()
        # # if transcript.language_code == 'ko' and transcript.is_generated == False:
        # #     for i in range(len(a)):
        # #         b += a[i]['text']
        # #         b += ' '
        # #     file = open("text_manual_ko.txt", "w") 
        # #     file.write(b)
        # #     file.close()
        
        # if transcript.language_code == 'en' and transcript.is_generated == True:
        #     for i in range(len(a)):
        #         c += a[i]['text']
        #         c += ' '
        #     file = open("text_auto.txt", "w") 
        #     file.write(c)
        #     file.close()
        

        # translating the transcript will return another transcript object
        # print(transcript.translate('en').fetch())

    if 'en' in trans_list:
        transcript = transcript_list.find_transcript(['en'])
        print('tran_en', transcript.fetch())
        a = transcript.fetch()
        b = ''
        # fetch the actual transcript data
        for i in range(len(a)):
            b += a[i]['text']
            b += ' '
        file = open("text_manual1.txt", "w") 
        file.write(b)
        file.close()
        print('ddddd')

    else:
        transcript = transcript_list.find_transcript([trans_list[0]])
        translated_transcript = transcript.translate('en')
        print('222222',translated_transcript.fetch())
        a = translated_transcript.fetch()
        b = ''
        # fetch the actual transcript data
        for i in range(len(a)):
            b += a[i]['text']
            b += ' '
        file = open("text_manual2.txt", "w") 
        file.write(b)
        file.close()


    # transcript = transcript_list.find_transcript(['ko'])
    # # print('tranko', transcript)
    # print('tran1_ko', transcript.fetch())

    # transcript = transcript_list.find_manually_created_transcript(['ko', 'en'])
    # print('tran_manually', transcript.fetch())

    # transcript = transcript_list.find_generated_transcript(['ko'])
    # print('tran_generated_ko', transcript.fetch())
    # transcript = transcript_list.find_generated_transcript(['en'])
    # print('tran_generated_en', transcript.fetch())

    # on progress
    # transcript = transcript_list.find_transcript(['ko','en'])
    # translated_transcript = transcript.translate('en')
    # print('1111111',transcript.fetch())
    # print('222222',translated_transcript.fetch())

    # you can also directly filter for the language you are looking for, using the transcript list
    # transcript = transcript_list.find_transcript(['ko'])  

    # or just filter for manually created transcripts  
    # transcript = transcript_list.find_manually_created_transcript(['ko'])  

    # or automatically generated ones  
    # transcript = transcript_list.find_generated_transcript(['ko'])


    # json_formatted = formatter.format_transcript(transcript)
    # with open('your_filename.json', 'w', encoding='utf-8') as json_file:
    #     json_file.write(json_formatted)
    

youtube('https://youtu.be/GhApgtyxuFs?si=d29b7lcgr3zQn5mW')